# 파이썬 기초
## 다루는 내용

### 주피터 사용법
### 파이썬 기본 변수
- 정수(int), 부동소수(float), 불리언(True.False), 문자열(Strings)
- 리스트(list), 튜플(tuple), 사전(ditionary), for문, if문

## 주피터 사용

- 아타콘다(anaconda)를 설치한 후 터미널 창에서 jupyter notebook 명령으로 실행
- 또는 윈도우 명령창에서 jupyter notebook 실행

# 파이썬 기초 문법
- 변수명과 변수 type을 미리 정의할 필요없이 임의로 즉시 만들어 사용할 수 있다.
- 예약어(if, for, True 등)는 변수로 사용할 수 없다.

#### 기본변수
- 파이썬의 기본 변수는 정수, 소수, 불리언, 문자열 등이 있다.
- 파이썬에서는 변수명과 변수 타입을 미리 정의할 필요 없이 임의로 즉시 만들어 사용할 수 있다.
- 단, 기본적으로 사용하는 예약어(if, for True 등)는 변수로 사용 할 수 없다.
- 아래는 변수 a, x, y, z 에 여러가지 기본 변수 값을 배정하는 것을 보였다. 값 배정(assign)시에는 "=" 기호를 사용한다.

- 문자열은 ''또는 ""으로 묶어서 표시한다.
- 여러줄로 된 문자열은 """ """으로 묶어서 표시한다.


a=0.5
x=3
y=True
z="홍길동"
print (a,x,y,z)

% 0.5 3 True 홍길동

print("문자열을 출력")
print('따옴표는 하나도 됩니다')

%문자열을 출력
%따옴표는 하나도 됩니다

multi = """이것은 여러줄로
구성된 문자열을 표시하기 위한
방법입니다."""
print(multi)

%이것은 여러줄로
%구성된 문자열을 표시하기 위한
%방법입니다.

- 논리값은 True, False (대소문자 구분)
- 논리값은 마치 숫자인 것처럼 연산에 바로 사용할 수 있다. (True=1, False=0)

x=3
y=True
print(x+y)
$4

a&b
a=True
b=False
a&b
$False

a and b
$a and b
False
a+3+b
$4

a+a+a+a+a+10
%15

## 리스트
- 여러항목의 집합체로 각 항목의 타입은 서로 달라도 된다. (정수, 부동소수, 논리값, 문자열 등)
- 리스트를 만들려면 대괄호 []를 사용하고 각 항목을 ','로 구분한다.

list_1 = [x, y, z]
print(list_1)

$[3, True, '홍길동']

list_1 = [x, y, "심청이"]
print(list_1)

$[3, True, '심청이']

type(list_1)

$list

item_2=list([1,2,3])
item_2

$[1, 2, 3]

items=[1,2,3,4,5, 'kim']
items*2

$[1, 2, 3, 4, 5, 'kim', 1, 2, 3, 4, 5, 'kim'] 중요중요중요

# len(): 리스트의 길이 (항목의 갯수 x,y,z, = 3개)
print(len(list_1))

%3

#in : 리스트 내에 어떤 항목이 들어 있는 지 확인,
# 해당 항목이 있으면 True 반환
print(3 in list_1)
print(4 in list_1)

$True
$False

#append():리스트에 항목을 추가
list_1.append(100); list_1

$[3, True, '심청이', 100]

list_1[2] = '둘리'
list_1

$'둘리'

#리스트에서 위치 번호는 '1'이 아니라 '0'부터 시작한다.
items[2]
$'String'

items[2]="String"
items
$[1, 2, 'String', 4, 5, 'kim']

items[:3] #처음부터 (3-1=2) 0번째, 1번째, 2번째 항목까지 출력, (N-1)
$[1, 2, 'String']

#뒤에서부터 인덱싱할 때는 '-''를 사용한다.
items[-1]
$'kim'

#리스트의 일부 구간만 얻으려면 슬라이스(slice) ':'를 사용한다.
items[2:] # 두번째 부터 끝까지 나타내라
$['String', 4, 5, 'kim']

- range() : 일정한 범위의 숫자로 구성된 리스트를 한 번에 만드는 함수
- range(start, stop, [step])
- default : start=0, step=1

x2 = range(0, 10)
type(x2)
$range

x3 = range(10, 20, 2)
# 10 12 14 16 18
for i in x3:
     print(i)
 
 $10
 $12
 $14
 $16
 $18
 
 print(x3[0])
print(x3[2])
print(x3[-1])
print(x3[-2])

$10
$14
$18
$16

- List Comprehension : 리스트 내부 for 문

list_2 = [x*10 for x in range(5)]
print(list_2)
$[0, 10, 20, 30, 40]

## 튜플 (tuple)
- 튜플은 리스트처럼 
- 튜플을 만들려면 소괄호()를 사용하여 만들거나 ,로 구분하여 나열한다.
- 튜플 사용 이유 : 항목의 내용을 더 이상 변경 밪이 & 처리속도 빠르다.

my_tuple = (1, 2, 3)
your_tuple = 4, 5, "hello"
print(my_tuple + your_tuple)
$(1, 2, 3, 4, 5, 'hello')

my_tuple
$(1, 2, 3)

a, b, c = 3, 4, 100
print(a)
print(b)
print(c)

$3
$4
$100

my_tuple[-1]
$3

my_tuple[-1] = 100
$---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-65-63312b295010> in <module>
----> 1 my_tuple[-1] = 100

TypeError: 'tuple' object does not support item assignment


### 사전 (Dictionaries)
- 딕셔너리로 키(key)-값(value) 조합 형태의 리스트를 만들 수 있다.
- 딕셔너리에서는 항목을 찾을 때 키(key)를 인자로 사용한다.
- 딕셔너리에서 저장된 순서는 중요시하지 않는다.
- 딕셔너리는 중괄호 {       } 로 만든다.

name_age = {'kim':20, 'lee' : 25}
print(name_age['kim'])
$20


- key() : key리스트
- value() : 값 리스트
- item() : 딕셔너리 각 항목을 튜플로 만들고 전체 항목을 리스트로 반환(검색 속도를 빠르게 할 목적)

print(name_age.keys())
print(name_age.values())
print(name_age.items())

$dict_keys(['kim', 'lee'])
$dict_values([20, 25])
$dict_items([('kim', 20), ('lee', 25)])

print("kim" in name_age)
print("park" in name_age)

$True
$False

name_age['song'] = 35
print(name_age)
${'kim': 20, 'lee': 25, 'song': 35}

x = range(1,20,2)
for i in x:
    print(i*10)

%10
30
50
70
90
110
130
150
170
190

## for 루프
- 동작을 반복할 때 for 루프를 사용한다.
- for 문장의 끝에는 ':'가 있어야 하며 for문이 적용되는 블록(block)은 반드시 들여쓰기(indentation)을 해야한다.

items = [1, 5, 100]
for x in items:
    print(x**3)
    
$1
125
1000000

for i in range(10): #  [0 1 2 3 4 5 6 7 8 9]
    print (i*1000)
    
$0
1000
2000
3000
4000
5000
6000
7000
8000
9000

for x in (1, 3, 5, 10): # 사각형의 넓이를 구하는 for 루프 문
    print(x, "'s square = ", x*x)
    
$1 's square =  1
3 's square =  9
5 's square =  25
10 's square =  100

# if 문

x=17
if x > 10:
    print("x > 10")
    print('---------')
elif x > 3:
    print("10 >= x < 3")
else:
    print(" x<=3 ")
    
$x > 10
---------


# sort
x = [2,1,3,5,4,]
x.sort()
print(x)
$[1, 2, 3, 4, 5]

- 리스트의 내용이 변경되지 않게 하려면 : sorted() 사용

x = [2,1,3,5,4]
y = sorted(x)
print(x)
print(y)
$[2, 1, 3, 5, 4]
[1, 2, 3, 4, 5]

- 내림차순으로 정렬 : reverse=True

x = [2,1,3,5,4]
x.sort(reverse=True)
print(x)
$[5, 4, 3, 2, 1]

x = [2,1,3,5,4]
x.sort(reverse=False)
print(x)
$[1, 2, 3, 4, 5]

- sort_values() : DataFrame을 정렬하는 메소드
- 특정 열을 기준으로 정렬할 수 있다.
- by: 기준 열, ascending : 오름차순/내림차순

import pandas as pd

df = pd.DataFrame({'순서':[1,2,3],
                   '이름':['park','lee','choi'],
                   '나이':[30,20,40]})
df.sort_values(by=['순서'], ascending=True)
$	순서	이름	나이
0	1	park	30
1	2	lee	20
2	3	choi	40

# 들여쓰기(Indentation)
- 들여쓰기는 보통 Tab 사용, Tab의 크기는 블럭내에서 통일시켜야 한다.
- sapce, returen 은 (), {}블럭 내부에서는 부시된다.
- 따라서 문장 길이가 긴 경우, 보기 쉽게 여러 줄로 표시해도 동작은 동일한다.
- (), {}블럭이 없는 경우, 줄이 바뀌면 문장 끝에 역 슬래시 \ 사용해야 한다.

x= [[1,2,3],
    [4,5,6,],
    [7,8,9]]
print(x)
$[[1, 2, 3], [4, 5, 6], [7, 8, 9]]

x=3+4+5+6+77\
  +3
print(x)
$98

# Module 설치

- Python 기본 기능 이외에 추가 기능을 사용하려면 해당 module을 설치해야 한다.
    * 해당 module을 server에 설치하는 것은 한번만 하면 된다.
    * pip install
- 설치된 module을 Python에서 사용하려면 profram에서 import 해야한다.
    * import matplotlib.pyplot as plt
    
# 함수 정의
- def:임의의 함수를 정의
- 함수 인자의 값을 default 값으로 지정할 수 있다.
    * 함수 호출 시에 인자 값을 주지 않으면 dufault 값으로 수행
- 함수 수행 결과로 2개 이상의 값을 return하고자 할때, tuple로 처리하면 편리

def double(x):
    return x*2

double(5)
$10

def double(x=100):
    return x*2

double()
$200

def double(x=100):
    return x*2

double()
$4

double()
$200

def double_triple(x):
    return x*2, x*3

x, y = double_triple(4)
print(x, y)
$8, 12

# matplotlib

- Python의 시각화 라이브러리
- %matplotlib inline : graph를 현재의 Jupyter notebook 화면에 직접 나타나게 그리라는 의미

import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
n=10
y=np.random.randn(n)
plt.plot(range(n), y)
plt.xlabel('time')
plt.ylabel('Random_Value')

Text(0, 0.5, 'Random_Value')

